{"version":3,"sources":["../src/util/image.process.util.ts"],"names":[],"mappings":"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","file":"image.process.util.js","sourcesContent":["import { Component, HttpException, Inject } from \"@nestjs/common\";\nimport * as crypto from \"crypto\";\nimport * as gm from \"gm\";\nimport * as path from \"path\";\nimport * as sharp from \"sharp\";\nimport { ImageMetadata } from \"../interface/file/image.metadata\";\nimport { Blur, ImagePostProcessInfo, ImagePreProcessInfo, Resize, Tailor } from \"../interface/file/image.process.info\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { FileUtil } from \"./file.util\";\nimport { KindUtil } from \"./kind.util\";\n\n/* 图片处理工具类 */\n@Component()\nexport class ImageProcessUtil {\n\n    private readonly gravity: Set<string>;\n    private readonly baseDirectory = path.resolve(process.cwd(), \"storages\", \"local\");\n\n    constructor(\n        @Inject(KindUtil) private readonly kindUtil: KindUtil,\n        @Inject(FileUtil) private readonly fileUtil: FileUtil\n    ) {\n        // 重心集合，在裁剪与水印中使用\n        this.gravity = new Set([\"northwest\", \"north\", \"northeast\", \"west\", \"center\", \"east\", \"southwest\", \"south\", \"southeast\"]);\n    }\n\n    // 获取指定图片、字节缓冲的图片元数据，参数可以为图片路径或者Buffer对象\n    // 根据路径获取元数据目前不使用，主要是根据获得的Buffer获取元数据\n    async getMetadata(pathOrBuffer: string | Buffer): Promise<ImageMetadata> {\n        // 使用sharp获取，格式、宽度、高度\n        const { format, width, height } = await sharp(pathOrBuffer).metadata();\n        let size, name;\n        // 为路径时\n        if (typeof pathOrBuffer === \"string\") {\n            const buffer = await this.fileUtil.read(pathOrBuffer);\n            size = await this.fileUtil.size(pathOrBuffer);\n            // 计算sha256为图片名称\n            name = crypto.createHash(\"sha256\").update(buffer).digest(\"hex\");\n        } else {\n            // 获取BUffer字节大小\n            size = Buffer.byteLength(pathOrBuffer);\n            // 计算sha256为名称\n            name = crypto.createHash(\"sha256\").update(pathOrBuffer).digest(\"hex\");\n        }\n        return {\n            name,\n            format,\n            width,\n            height,\n            size\n        } as any;\n    }\n\n    // 根据图片处理信息处理指定路径图片，并且按照配置保存它，返回处理后图片元数据，用于上传时保存图片\n    async processAndStore(imagePath: string, bucket: Bucket, imageProcessInfo: ImagePostProcessInfo | ImagePreProcessInfo): Promise<ImageMetadata> {\n        // 获取处理后Buffer，这里必须先获取BUffer，再获取format、name，才能写入文件，因为文件名需要使用name、format\n        // 不能直接使用toFile\n        const buffer: Buffer = await this.preProcess(imagePath, bucket, imageProcessInfo);\n        // 获取处理后元数据\n        const metadata: ImageMetadata = await this.getMetadata(buffer);\n        // 处理后图片绝对路径\n        const absolutePath: string = this.baseDirectory + \"/\" + bucket.name + \"/\" + metadata.name + \".\" + metadata.format;\n        await this.fileUtil.write(absolutePath, buffer);\n        // 返回处理后元数据\n        return metadata;\n    }\n\n    // 根据图片处理信息处理指定路径图片，返回内存中字节存储,用于向客户端输出图片\n    async processAndOutput(bucket: Bucket, imagePath: string, imageProcessInfo: ImagePostProcessInfo | ImagePreProcessInfo): Promise<Buffer> {\n        // 返回Buffer对象\n        return this.postProcess(imagePath, bucket, imageProcessInfo as any);\n    }\n\n    // sharp实例预处理函数，用于上传预处理使用，只支持缩放、裁剪、水印、旋转四个参数\n    // 这个函数直接输出处理后的buffer，因为其中可能生成临时文件，临时文件删除后sharp实例获取Buffer会出错\n    async preProcess(imagePath: string, bucket: Bucket, imageProcessInfo: ImagePreProcessInfo): Promise<Buffer> {\n        let instance: sharp.SharpInstance = sharp(imagePath);\n        // 因为sharp支持角度过少，旋转采用gm生成旋转临时图片，保存临时图片路径，最后删除\n        // 因为sharp不支持水印透明度，采用gm添加水印，因为gm不支持水印图片大小调整，则生成临时水印图片，最后删除\n        let rotateImagePath = \"\", watermarkImagePath = \"\";\n        if (!imageProcessInfo) {\n            return instance.toBuffer();\n        }\n        const { resize, tailor, watermark, rotate, format, lossless } = imageProcessInfo as ImagePostProcessInfo;\n        // 获取处理之前元数据\n        const metadata: ImageMetadata = await this.getMetadata(imagePath);\n        try {\n            let width2, height2;\n            // 缩放与裁剪都需要之前一步得到的图片宽高\n            // 如果存在裁剪，且为缩放之前裁剪\n            if (tailor && tailor.isBefore) {\n                // 裁剪，获取裁剪之后宽高\n                const result1 = this.tailor(instance, tailor, metadata.width, metadata.height);\n                // 如果缩放存在，使用裁剪之后宽高，进行缩放\n                if (resize) {\n                    const result2 = this.resize(instance, resize, result1.width, result1.height);\n                    width2 = result2.width;\n                    height2 = result2.height;\n                }\n                width2 = result1.width;\n                height2 = result1.height;\n            }\n            // 如果裁剪存在，且为缩放之后裁剪\n            else if (tailor && !tailor.isBefore) {\n                // 如果缩放存在\n                if (resize) {\n                    // 先缩放，获取缩放后宽高\n                    const result1 = this.resize(instance, resize, metadata.width, metadata.height);\n                    // 使用缩放后宽高进行裁剪\n                    const result2 = this.tailor(instance, tailor, result1.width, result1.height);\n                    width2 = result2.width;\n                    height2 = result2.height;\n                } else {\n                    // 缩放不存在，直接使用原图大小进行裁剪\n                    const result1 = this.tailor(instance, tailor, metadata.width, metadata.height);\n                    width2 = result1.width;\n                    height2 = result1.height;\n                }\n            }\n            // 如果裁剪不存在\n            else {\n                // 如果缩放存在\n                if (resize) {\n                    // 直接使用原图大小缩放\n                    const result1 = this.resize(instance, resize, metadata.width, metadata.height);\n                    width2 = result1.width;\n                    height2 = result1.height;\n                } else {\n                    width2 = metadata.width;\n                    height2 = metadata.height;\n                }\n            }\n            // 水印统一最后添加\n            // 预处理时，只有明确指定添加水印才会添加\n            // 水印在旋转之前添加，一起旋转\n            if (watermark === true) {\n                // 获取生成的临时图片路径，这个图片已经添加了水印\n                watermarkImagePath = await this.watermark(bucket, instance, metadata, watermark, width2, height2);\n                // 重新设置sharp实例引用，为生成的临时图片，这个图片已经使用gm加上了水印，这里必然加水印\n                instance = sharp(watermarkImagePath);\n            }\n            if (rotate) {\n                // 获取中间生成的临时文件路径，因为旋转需要使用gm\n                rotateImagePath = await this.rotate(instance, metadata, rotate, width2, height2);\n                // 重新获取Sharp实例\n                instance = sharp(rotateImagePath);\n            }\n            if (format) { this.format(instance, format); }\n            if (lossless) {\n                this.output(instance, format ? format : metadata.format, lossless, 100, true);\n            }\n        } catch (err) {\n            if (err instanceof HttpException) {\n                throw err;\n            } else {\n                throw new HttpException(err.toString(), 408);\n            }\n        }\n        // 这里不使用finally块来清理临时文件，因为删除方法可能抛出异常，这个异常不知道在finally块里面如何处理\n        // 删除旋转临时图片\n        const result: Buffer = await instance.toBuffer();\n        if (rotateImagePath) {\n            await this.fileUtil.deleteIfExist(rotateImagePath);\n        }\n        // 删除水印临时图片\n        if (watermarkImagePath) {\n            await this.fileUtil.deleteIfExist(watermarkImagePath);\n        }\n        return result;\n    }\n\n    // sharp实例后处理函数、用于输出访问图片时使用\n    async postProcess(imagePath: string, bucket: Bucket, imageProcessInfo: ImagePostProcessInfo): Promise<Buffer> {\n        let instance: sharp.SharpInstance = sharp(imagePath);\n        // 因为sharp支持角度过少，旋转采用gm生成旋转临时图片，保存临时图片路径，最后删除\n        // 因为sharp不支持水印透明度，采用gm添加水印，因为gm不支持水印图片大小调整，则生成临时水印图片，最后删除\n        let rotateImagePath = \"\", watermarkImagePath = \"\";\n        if (!imageProcessInfo) {\n            // 由于try块最后finally要删除临时图片，所以这里需要生成buffer，删除图片之后生成buffer出错\n            return instance.toBuffer();\n        }\n        const { resize, tailor, watermark, rotate, blur, sharpen, format, lossless, strip, quality, progressive } = imageProcessInfo;\n        // 获取处理之前元数据\n        const metadata: ImageMetadata = await this.getMetadata(imagePath);\n        try {\n            let width2, height2;\n            // 缩放与裁剪都需要之前一步得到的图片宽高\n            // 如果存在裁剪，且为缩放之前裁剪\n            if (tailor && tailor.isBefore) {\n                // 裁剪，获取裁剪之后宽高\n                const result1 = this.tailor(instance, tailor, metadata.width, metadata.height);\n                // 如果缩放存在，使用裁剪之后宽高，进行缩放\n                if (resize) {\n                    const result2 = this.resize(instance, resize, result1.width, result1.height);\n                    width2 = result2.width;\n                    height2 = result2.height;\n                }\n                width2 = result1.width;\n                height2 = result1.height;\n            }\n            // 如果裁剪存在，且为缩放之后裁剪\n            else if (tailor && !tailor.isBefore) {\n                // 如果缩放存在\n                if (resize) {\n                    // 先缩放，获取缩放后宽高\n                    const result1 = this.resize(instance, resize, metadata.width, metadata.height);\n                    // 使用缩放后宽高进行裁剪\n                    const result2 = this.tailor(instance, tailor, result1.width, result1.height);\n                    width2 = result2.width;\n                    height2 = result2.height;\n                } else {\n                    // 缩放不存在，直接使用原图大小进行裁剪\n                    const result1 = this.tailor(instance, tailor, metadata.width, metadata.height);\n                    width2 = result1.width;\n                    height2 = result1.height;\n                }\n            }\n            // 如果裁剪不存在\n            else {\n                // 如果缩放存在\n                if (resize) {\n                    // 直接使用原图大小缩放\n                    const result1 = this.resize(instance, resize, metadata.width, metadata.height);\n                    width2 = result1.width;\n                    height2 = result1.height;\n                } else {\n                    width2 = metadata.width;\n                    height2 = metadata.height;\n                }\n            }\n            // 这里无论如何肉会进入水印方法，然后根据配置与参数决定是否添加水印\n            watermarkImagePath = await this.watermark(bucket, instance, metadata, watermark as any, width2, height2);\n            // 这里不一定会加水印，如果加了水印，要重新设置sharp实例为指向临时文件\n            if (watermarkImagePath) {\n                instance = sharp(watermarkImagePath);\n            }\n            if (rotate) {\n                rotateImagePath = await this.rotate(instance, metadata, rotate, width2, height2);\n                instance = sharp(rotateImagePath);\n            }\n            if (blur) { this.blur(instance, blur); }\n            if (sharpen) { this.sharpen(instance, sharpen); }\n            if (format) { this.format(instance, format); }\n            if (strip) { this.strip(instance, strip); }\n            if (lossless || quality || progressive) {\n                this.output(instance, format ? format : metadata.format, lossless as any, quality as any, progressive as any);\n            }\n\n        } catch (err) {\n            if (err instanceof HttpException) {\n                throw err;\n            } else {\n                throw new HttpException(err.toString(), 408);\n            }\n        }\n        // 这里不使用finally块来清理临时文件，因为删除方法可能抛出异常，这个异常不知道在finally块里面如何处理\n        // 删除旋转临时图片\n        const result: Buffer = await instance.toBuffer();\n        if (rotateImagePath) {\n            await this.fileUtil.deleteIfExist(rotateImagePath);\n        }\n        // 删除水印临时图片\n        if (watermarkImagePath) {\n            await this.fileUtil.deleteIfExist(watermarkImagePath);\n        }\n        return result;\n    }\n\n    resize(instance: sharp.SharpInstance, resize: Resize, preWidth: number, preHeight: number): any {\n        // 获取参数\n        const { mode, data } = resize;\n        // 声明resize方法的参数\n        let width, height;\n        // 等比缩放\n        if (mode === \"scale\") {\n            if (data.scale && Number.isInteger(data.scale) && data.scale >= 1 && data.scale <= 1000) {\n                // 等比缩放直接用原宽高乘以比例\n                width = preWidth * data.scale / 100;\n                height = preHeight * data.scale / 100;\n            }\n            else {\n                throw new Error(\"缩放比例错误\");\n            }\n        }\n        // 只缩放宽度\n        else if (mode === \"wscale\") {\n            if (data.wscale && Number.isInteger(data.wscale) && data.wscale >= 1 && data.wscale <= 1000) {\n                // 只缩放宽度，给原宽度乘以比例\n                width = preWidth * data.wscale / 100;\n                height = preHeight;\n            } else {\n                throw new Error(\"宽度缩放比例错误\");\n            }\n        }\n        // 只缩放高度\n        else if (mode === \"hscale\") {\n            if (data.hscale && Number.isInteger(data.hscale) && data.hscale >= 1 && data.hscale <= 1000) {\n                // 只缩放高度，给高度乘以比例\n                width = preWidth;\n                height = preHeight * data.hscale / 100;\n            } else {\n                throw new Error(\"高度缩放比例错误\");\n            }\n        }\n        // 指定宽高缩放\n        else if (mode === \"both\") {\n            if (data.width && Number.isInteger(data.width) && data.height && Number.isInteger(data.height)) {\n                // 指定宽高缩放，直接使用参数中宽高\n                width = data.width;\n                height = data.height;\n            } else {\n                throw new Error(\"宽高参数错误\");\n            }\n        }\n        // 指定宽度等比缩放\n        else if (mode === \"fw\") {\n            if (data.width && Number.isInteger(data.width)) {\n                // 指定宽度等比缩放，宽度为参数值\n                width = data.width;\n                // 高度为原高度乘以宽度缩放比\n                height = preHeight * data.width / preWidth;\n            } else {\n                throw new Error(\"宽度参数错误\");\n            }\n        }\n        // 指定高度等比缩放\n        else if (mode === \"fh\") {\n            if (data.height && Number.isInteger(data.height)) {\n                // 指定高度等比缩放，高度为参数值\n                height = data.height;\n                // 宽度为原宽度乘以高度缩放比\n                width = preWidth * data.height / preHeight;\n            } else {\n                throw new Error(\"高度参数错误\");\n            }\n        }\n        // 指定像素等比缩放\n        else if (mode === \"fp\") {\n            if (data.pixel && Number.isInteger(data.pixel) && data.pixel >= 1 && data.pixel <= 25000000) {\n                // 指定像素等比缩放，高度平方乘以宽高比等于像素值\n                height = Math.sqrt(data.pixel * preHeight / preWidth);\n                // 宽高乘积为像素值\n                width = data.pixel / height;\n            } else {\n                throw new Error(\"像素参数不正确\");\n            }\n        }\n        // 限制宽高最大值，如果宽高都已经小于限制值，那就不变\n        // 宽高有大于限制值的，按照宽、高中较小缩放比缩放，保证缩放结果宽高都小于限制值\n        else if (mode === \"fwfh\") {\n            if (data.width && Number.isInteger(data.width) && data.height && Number.isInteger(data.height)) {\n                // 宽高都为参数值，后面要链式使用max函数\n                width = data.width;\n                height = data.height;\n            } else {\n                throw new Error(\"宽高参数不正确\");\n            }\n        }\n        // 闲置宽高最小值，如果宽高都已经大于限制值，那就不变\n        // 宽高有小于限制值的，按照宽、高较大缩放比缩放，保证缩放结果宽高都大于限制值\n        else if (mode === \"fwfh2\") {\n            if (data.width && Number.isInteger(data.width) && data.height && Number.isInteger(data.height)) {\n                width = data.width;\n                height = data.height;\n            } else {\n                throw new Error(\"宽高参数不正确\");\n            }\n        } else {\n            throw new Error(\"缩放模式不正确\");\n        }\n        // 为sharp实例添加缩放处理,默认宽高不足时不裁剪，只缩放\n        instance.resize(Math.floor(width), Math.floor(height)).ignoreAspectRatio();\n        // 下面要计算缩放后宽高，以及添加限制函数\n        // 只有fwfh、fwfh2两个模式要特殊处理\n        // 当限制宽高最大值时\n        if (mode === \"fwfh\") {\n            instance.max();\n            // 如果高度大于限制值，宽度小于等于限制值\n            if (data.width >= preWidth && data.height < preHeight) {\n                // 按照高度缩放比缩放\n                height = data.height;\n                width = preWidth * data.height / preHeight;\n            }\n            // 宽度大于，而高度小于等于时\n            else if (data.width < preWidth && data.height >= preHeight) {\n                // 按照宽度缩放比缩放\n                width = data.width;\n                height = preHeight * data.width / preWidth;\n            }\n            // 两个都大于时\n            else if (data.width < preWidth && data.height < preHeight) {\n                // 按照较小缩放比缩放\n                const wscale = data.width / preWidth;\n                const hscale = data.height / preHeight;\n                const scale = wscale < hscale ? wscale : hscale;\n                width = preWidth * scale;\n                height = preHeight * scale;\n            }\n            // 两个都小于时\n            else {\n                // 宽高为原始值\n                width = preWidth;\n                height = preHeight;\n            }\n        }\n        // 限制宽高最小值时\n        else if (mode === \"fwfh2\") {\n            instance.min();\n            // 当宽度大于等于限制值，二高度小于限制值时\n            if (data.width <= preWidth && data.height > preHeight) {\n                // 按照高度缩放比缩放\n                height = data.height;\n                width = preWidth * data.height / preHeight;\n            }\n            // 当宽度小于限制值，高度大于等于限制值时，按照宽度缩放比缩放\n            else if (data.width > preWidth && data.height <= preHeight) {\n                width = data.width;\n                height = preHeight * data.width / preWidth;\n            }\n            // 当宽、高都小于限制值时\n            else if (data.width > preWidth && data.height > preHeight) {\n                // 按照较大缩放比缩放\n                const wscale = data.width / preWidth;\n                const hscale = data.height / preHeight;\n                const scale = wscale > hscale ? wscale : hscale;\n                width = preWidth * scale;\n                height = preHeight * scale;\n            }\n            // 当宽高都大于限制值时\n            else {\n                // 宽高为原始值\n                width = preWidth;\n                height = preHeight;\n            }\n        }\n        // 返回缩放后宽高\n        return { width, height };\n    }\n\n    // 裁剪函数\n    // 裁剪原理：首先选定九宫格方位，然后在不同方位按照宽高选定裁剪区域，九宫格暂定按照三分之一线划分\n    // 四个角：northwest、southwest、northeast、southeast，宽度、高度都是相对于角点的\n    // 南北：north、south，高度从顶边、底边开始算，宽度对称于垂直中间线\n    // 东西：west、east，宽度从左边、右边开始算，高度对称于水平中间线\n    // 中心：center，宽度、高度分别对称于垂直、水平中间线\n    // 然后计算偏移，x正向为右、负向为左，y正向为下，负向为上，如果偏移后超出外边界，则自动丢弃\n    // 在测试中出现了超出内边界出现not found错误的问题，可能是暂时错误，暂时不管\n    tailor(instance: sharp.SharpInstance, tailor: Tailor, preWidth: number, preHeight: number): any {\n        // 获取参数，根据这些参数计算最后的左偏移、顶偏移、宽高\n        const { x, y, gravity } = tailor;\n        // 声明裁剪宽高，初始值为参数值\n        let width = tailor.width;\n        let height = tailor.height;\n        // 声明左偏移，顶部偏移，不能为负\n        let left, top;\n        // 方位为西北\n        if (gravity === \"northwest\") {\n            // 初始偏移为0、0\n            left = 0;\n            top = 0;\n        }\n        // 方位为东北\n        else if (gravity === \"northeast\") {\n            // 初始偏移,左偏移为原始宽度减去裁剪宽度\n            left = preWidth - width;\n            top = 0;\n        }\n        // 方位为西南\n        else if (gravity === \"southwest\") {\n            left = 0;\n            top = preHeight - height;\n        }\n        // 方位为东南\n        else if (gravity === \"southeast\") {\n            left = preWidth - width;\n            top = preHeight - height;\n        }\n        // 方位为东\n        else if (gravity === \"east\") {\n            left = preWidth - width;\n            top = preHeight / 2 - height / 2;\n        }\n        // 方位为西\n        else if (gravity === \"west\") {\n            left = 0;\n            top = preHeight / 2 - height / 2;\n        }\n        // 方位为南\n        else if (gravity === \"south\") {\n            left = preWidth / 2 - width / 2;\n            top = preHeight - height;\n        }\n        // 方位为北\n        else if (gravity === \"north\") {\n            left = preWidth / 2 - width / 2;\n            top = 0;\n        }\n        // 方位为中心\n        else if (gravity === \"center\") {\n            left = preWidth / 2 - width / 2;\n            top = preHeight / 2 - height / 2;\n        } else {\n            throw new Error(\"裁剪方位不正确\");\n        }\n        // 偏移加上x、y\n        left += x;\n        top += y;\n        // 如果偏移为负，修改为0,同时修改宽高\n        if (left < 0) {\n            width += left;\n            left = 0;\n        }\n        if (top < 0) {\n            height += top;\n            top = 0;\n        }\n        // 如果偏移加上宽度大于了原始宽高\n        if ((left + width) > preWidth) {\n            width = preWidth - left;\n        }\n        if ((top + height) > preHeight) {\n            height = preHeight - top;\n        }\n        // 为sharp实例添加裁剪处理\n        instance.extract({\n            left: Math.floor(left),\n            top: Math.floor(top),\n            width: Math.floor(width),\n            height: Math.floor(height)\n        });\n        return { width, height };\n    }\n\n    // 水印处理函数\n    // 水印原理：首先根据ws短边自适应比例确定水印图片宽高，短边指的是原图的较短边\n    // 根据gravity给水印图片定位，如果是四个角，则角点重合，如果是四条边，则边重合，关于中心线对称，如果是中心，则关于两条中心线对称\n    // 根据x、y进行偏移，x、y只支持正整数，如果是四个角，都是向原图内部偏移，东西两条边，只向内部偏移x，南北两条边，只向内部偏移y，重心不偏移\n    // 且水印图片宽高都不能超过原图，超过不能输出，如果水印图片宽高加上相应偏移超过了超过了原图宽高，则偏移会自动调整\n    async watermark(bucket: Bucket, instance: sharp.SharpInstance, metadata: ImageMetadata, watermark: boolean, preWidth: number, preHeight: number): Promise<string> {\n        let enable: boolean;\n        if (watermark === true) { enable = true; }\n        else if (watermark === false) { enable = false; }\n        else if (watermark === undefined) { enable = !!bucket.imageConfig.watermarkEnable; }\n        else { throw new Error(\"水印参数错误\"); }\n        if (enable) {\n            // 获取参数，根据这些参数计算最后的左偏移、顶偏移、宽高\n            let x = bucket.imageConfig.watermarkX;\n            let y = bucket.imageConfig.watermarkY;\n            const ws = bucket.imageConfig.watermarkWs;\n            // 透明度暂时不使用\n            const opacity = bucket.imageConfig.watermarkOpacity;\n            let gravity = bucket.imageConfig.watermarkGravity;\n            const shuiyinPath = process.cwd() + bucket.imageConfig.watermarkSaveKey;\n            // 水印图片宽高\n            let { width, height } = await this.getMetadata(shuiyinPath);\n            // 计算短边自适应后水印图片宽高\n            if (preWidth < preHeight) {\n                height = height * preWidth * ws / (100 * width);\n                width = preWidth * ws / 100;\n            } else {\n                width = width * preHeight * ws / (100 * height);\n                height = preHeight * ws / 100;\n            }\n            // 转化为gm参数\n            // 方位为西北\n            if (gravity === \"northwest\") {\n                gravity = \"NorthWest\";\n            }\n            // 方位为东北\n            else if (gravity === \"northeast\") {\n                gravity = \"NorthEast\";\n            }\n            // 方位为西南\n            else if (gravity === \"southwest\") {\n                gravity = \"SouthWest\";\n            }\n            // 方位为东南\n            else if (gravity === \"southeast\") {\n                gravity = \"SouthEast\";\n            }\n            // 方位为东\n            else if (gravity === \"east\") {\n                y = 0;\n                gravity = \"East\";\n            }\n            // 方位为西\n            else if (gravity === \"west\") {\n                y = 0;\n                gravity = \"West\";\n            }\n            // 方位为南\n            else if (gravity === \"south\") {\n                x = 0;\n                gravity = \"South\";\n            }\n            // 方位为北\n            else if (gravity === \"north\") {\n                x = 0;\n                gravity = \"North\";\n            }\n            // 方位为中心\n            else if (gravity === \"center\") {\n                x = 0;\n                y = 0;\n                gravity = \"Center\";\n            } else {\n                throw new Error(\"水印方位不正确\");\n            }\n            /* //如果偏移为负，不能输出\n            if (left < 0 || top < 0) {\n                throw new Error(\"水印图片超出界限\")\n            } */\n            // 水印图片大于原始宽高也不能输出\n            if (width > preWidth || height > preHeight) {\n                throw new Error(\"水印图片过大\");\n            }\n            // 获取临时原图、缩放后水印图片Buffer，生成存储临时路径\n            const buffer: Buffer = await instance.toBuffer();\n            const shuiyinBuffer: Buffer = await sharp(shuiyinPath).resize(Math.floor(width), Math.floor(height)).ignoreAspectRatio().toBuffer();\n            const tempPath = this.baseDirectory + \"/temp/raw\" + (+new Date()) + \".\" + metadata.format;\n            const shuiyinTempPath = this.baseDirectory + \"/temp/shuiyin\" + (+new Date()) + shuiyinPath.substring(shuiyinPath.lastIndexOf(\".\"));\n            await this.fileUtil.write(tempPath, buffer);\n            await this.fileUtil.write(shuiyinTempPath, shuiyinBuffer);\n            let ex: any = \"\";\n            await new Promise((resolve, reject) => {\n                gm(tempPath).composite(shuiyinTempPath).gravity(gravity).geometry(\"+\" + x + \"+\" + y).dissolve(opacity).write(tempPath, err => {\n                    if (err) { reject(new HttpException(\"为图片添加水印出现错误:\" + err.toString(), 407)); }\n                    resolve();\n                });\n            }).catch(err => {\n                ex = err;\n            });\n            if (ex) {\n                throw ex;\n            }\n            const a = true;\n            await this.fileUtil.delete(shuiyinTempPath);\n            return tempPath;\n        } else {\n            return undefined as any;\n        }\n    }\n\n    /* 旋转，sharp只支持90、180、270度，由于sharp的旋转，不会改变宽高，所以90、180度旋转后需要宽高倒置 */\n    async rotate(instance: sharp.SharpInstance, metadata: ImageMetadata, rotate: number, width: number, height: number): Promise<string> {\n        if (!Number.isInteger(rotate)) {\n            throw new Error(\"旋转角度不正确\");\n        }\n        const buffer: Buffer = await instance.toBuffer();\n        const tempPath = this.baseDirectory + \"/temp/rotate\" + (+new Date()) + \".\" + metadata.format;\n        let ex: any = \"\";\n        // 根据绝对路径保存图片\n        await this.fileUtil.write(tempPath, buffer);\n        await new Promise((resolve, reject) => {\n            gm(tempPath).rotate(\"black\", rotate).write(tempPath, err => {\n                if (err) { reject(new HttpException(\"旋转文件图片出现错误:\" + err.toString(), 407)); }\n                resolve();\n            });\n        }).catch(err => {\n            ex = err;\n        });\n        if (ex) {\n            throw ex;\n        }\n        return tempPath;\n    }\n\n    /* 高斯模糊，sharp不支持模糊半径，sigma越大越模糊，20已经很模糊了 */\n    blur(instance: sharp.SharpInstance, blur: Blur) {\n        if (!Number.isInteger(blur.sigma)) {\n            throw new Error(\"模糊标准差错误\");\n        }\n        // sharp不支持模糊半径\n        instance.blur(blur.sigma);\n    }\n\n    /* 锐化后图片会变大 */\n    sharpen(instance: sharp.SharpInstance, sharpen: boolean) {\n        if (sharpen === true) {\n            instance.sharpen();\n        }\n        else if (sharpen === false) {\n\n        }\n        else { throw new Error(\"锐化参数错误\"); }\n    }\n\n    /* 转换图片格式，png格式比jpeg大很多，webp默认内为有损格式，比jpeg小\n       toFormat方法也支持选项，其中质量、渐进、无损等选项可以设置,虽然函数定义中没有无损选项，但实际上可以处理无损参数\n       目前质量、无损、渐进等在output中设置，format只支持jpeg、png、webp、tiff等格式，不支持bmp、gif等格式\n    */\n    format(instance: sharp.SharpInstance, format: string) {\n        if (this.kindUtil.isImage(format)) {\n            instance.toFormat(format);\n        } else {\n            throw new Error(\"格式参数错误\");\n        }\n    }\n\n    /* 去除元信息后稍微变大一点 */\n    strip(instance: sharp.SharpInstance, strip: boolean) {\n        if (strip === true) {\n        } else if (strip === false) {\n            instance.withMetadata();\n        } else {\n            throw new Error(\"去除元信息参数错误\");\n        }\n    }\n\n    /* 图片质量下降，会变小\n       渐进显示会变大\n\n    */\n    output(instance: sharp.SharpInstance, format: string, lossless: boolean, quality: number, progressive: boolean) {\n        if (lossless !== undefined && lossless !== null && lossless !== true && lossless !== false) {\n            throw new Error(\"无损参数错误\");\n        }\n        if (quality !== undefined && quality !== null && !Number.isInteger(quality)) {\n            throw new Error(\"质量参数错误\");\n        }\n        if (progressive !== undefined && progressive !== null && progressive !== true && progressive !== false) {\n            throw new Error(\"渐进参数错误\");\n        }\n        const options: any = {\n            force: true\n        };\n        if (lossless !== undefined && lossless !== null) { options.lossless = lossless; }\n        if (quality !== undefined && quality !== null) { options.quality = quality; }\n        if (progressive !== undefined && progressive !== null) { options.progressive = progressive; }\n        // jpeg不支持无损，加上了也无所谓\n        if (format === \"jpeg\") {\n            instance.jpeg(options);\n        }\n        // png不支持质量、无损选项，加上了也不影响\n        else if (format === \"png\") {\n            instance.png(options);\n        }\n        // webp则三个都支持\n        else if (format === \"webp\") {\n            instance.webp(options);\n        }\n        // tiff不支持渐进、无损选项，加上也无所谓\n        else if (format === \"tiff\") {\n            instance.tiff(options);\n        } else {\n            // 不支持对其他类型的无损、质量、渐进处理，但是不报错\n        }\n    }\n}\n"]}