{"version":3,"sources":["../src/util/token.util.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2CAA0D;AAC1D,iCAAiC;AAIjC,IAAa,SAAS,GAAtB;IAEI;IACA,CAAC;IAED,QAAQ,CAAC,GAAW,EAAE,MAAc;QAChC,IAAI,MAAM,CAAC,eAAe,KAAK,QAAQ,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;SACnC;QAED,MAAM,MAAM,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;QAE7E,MAAM,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;QACjD,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/D,OAAO,GAAG,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,GAAW,EAAE,MAAc,EAAE,KAAa;QAC7C,MAAM,MAAM,GAAW,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QACrD,MAAM,GAAG,GAAW,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3C,MAAM,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;QACjD,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvE,IAAI,GAAG,KAAK,WAAW,EAAE;YACrB,MAAM,IAAI,sBAAa,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;SAC7C;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;QAC3C,IAAI,GAAG,GAAG,MAAM,EAAE;YACd,MAAM,IAAI,sBAAa,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;SAC3C;IACL,CAAC;CACJ,CAAA;AA/BY,SAAS;IADrB,kBAAS,EAAE;;GACC,SAAS,CA+BrB;AA/BY,8BAAS","file":"token.util.js","sourcesContent":["import { Component, HttpException } from \"@nestjs/common\";\nimport * as crypto from \"crypto\";\nimport { Bucket } from \"../model/bucket.entity\";\n\n@Component()\nexport class TokenUtil {\n\n    constructor() {\n    }\n\n    getToken(url: string, bucket: Bucket): string {\n        if (bucket.publicOrPrivate === \"public\") {\n            throw new Error(\"公有空间不需要token\");\n        }\n        // 获取超时GMT时间戳，单位为秒\n        const expire: number = Math.floor((+new Date()) / 1000) + bucket.tokenExpire;\n        // 拼接要签名的字符串\n        const str = url + expire + bucket.tokenSecretKey;\n        const md5 = crypto.createHash(\"md5\").update(str).digest(\"hex\");\n        return md5 + expire;\n    }\n\n    verify(url: string, bucket: Bucket, token: string): void {\n        const expire: number = parseInt(token.substring(32));\n        const md5: string = token.substring(0, 32);\n        const str = url + expire + bucket.tokenSecretKey;\n        const generateMd5 = crypto.createHash(\"md5\").update(str).digest(\"hex\");\n        if (md5 !== generateMd5) {\n            throw new HttpException(\"token验证错误\", 413);\n        }\n        // 当前时间\n        const now = Math.floor(+new Date() / 1000);\n        if (now > expire) {\n            throw new HttpException(\"token超时\", 414);\n        }\n    }\n}\n"]}