{"version":3,"sources":["../src/controller/file.controller.ts"],"names":[],"mappings":"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","file":"file.controller.js","sourcesContent":["import {\n    Controller,\n    Get,\n    Post,\n    Request,\n    Response,\n    Body,\n    Param,\n    Headers,\n    Query,\n    UseFilters,\n    UseGuards,\n    HttpException,\n    Inject\n} from \"@nestjs/common\";\nimport { ImagePostProcessInfo } from \"../interface/file/image.process.info\";\nimport { LocalExceptionFilter } from \"../exception/local.exception.filter\";\nimport { DownloadParamGuard } from \"../guard/download.param.guard\";\nimport { ImageMetadata } from \"../interface/file/image.metadata\";\nimport { UploadParamGuard } from \"../guard/upload.param.guard\";\nimport { ImageProcessUtil } from \"../util/image.process.util\";\nimport { HeaderParam } from \"../interface/file/header.param\";\nimport { QueryParam } from \"../interface/file/query.param\";\nimport { Repository } from \"typeorm\";\nimport { PathParam } from \"../interface/file/path.param\";\nimport { FileService } from \"../service/file.service\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { CommonData } from \"../interface/common\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { TokenUtil } from \"../util/token.util\";\nimport { Image } from \"../model/image.entity\";\nimport { File } from \"../model/file.entity\";\nimport { FileUtil } from \"../util/file.util\";\nimport { KindUtil } from \"../util/kind.util\";\nimport * as crypto from \"crypto\";\nimport * as path from \"path\";\nimport * as mime from \"mime\";\n\n/*文件控制器，包含了文件下载、上传、访问功能\n  访问、下载在浏览器的默认效果不同，其中访问私有空间文件需要token\n*/\n@Controller(\"local/file\")\n@UseFilters(new LocalExceptionFilter())\nexport class FileController {\n\n\n    private readonly baseDirectory = path.resolve(process.cwd(), \"storages\", \"local\");\n\n    /**\n     * @param { FileUtil } fileUtil\n     * @param { KindUtil } kindUtil\n     * @param { TokenUtil } tokenUtil\n     * @param { FileService } fileService\n     * @param { ImageProcessUtil } imageProcessUtil\n     * @param { Repository<File> } fileRepository\n     * @param { Repository<Image> } imageRepository\n     * @param { Repository<Bucket> } bucketRepository\n     */\n    constructor(\n        @Inject(FileUtil) private readonly fileUtil: FileUtil,\n        @Inject(KindUtil) private readonly kindUtil: KindUtil,\n        @Inject(TokenUtil) private readonly tokenUtil: TokenUtil,\n        @Inject(FileService) private readonly fileService: FileService,\n        @Inject(ImageProcessUtil) private readonly imageProcessUtil: ImageProcessUtil,\n        @InjectRepository(File) private readonly fileRepository: Repository<File>,\n        @InjectRepository(Image) private readonly imageRepository: Repository<Image>,\n        @InjectRepository(Bucket) private readonly bucketRepository: Repository<Bucket>) {\n    }\n\n    /* 下载文件接口，文件路径在url中，文件存在直接返回，不存在返回错误码404 */\n    @Get(\"/download\")\n    @UseGuards(DownloadParamGuard)\n    async download(@Headers() headers: HeaderParam, @Response() res): Promise<any> {\n        const { bucketName, fileName } = headers;\n        // 文件绝对路径，这里并不查询数据库，直接从文件夹获取\n        const realPath: string = this.baseDirectory + \"/\" + bucketName + \"/\" + fileName;\n        // 文件不存在，返回404\n        if (!this.fileUtil.exist(realPath)) {\n            throw new HttpException(\"请求下载的文件不存在\", 404);\n        }\n        // 下载文件的buffer，不进行处理，返回原始文件\n        const buffer: Buffer = await this.fileUtil.read(realPath);\n        // 文件类型响应头\n        res.setHeader(\"Content-Type\", mime.getType(fileName));\n        // 文件大小响应头\n        res.setHeader(\"Content-Length\", Buffer.byteLength(buffer));\n        // 下载响应头，不管浏览器支持不支持显示文件mime，都会直接弹出下载\n        res.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName);\n        // 发送文件buffer\n        res.end(buffer);\n        return;\n    }\n\n    /* 上传文件接口，空间名、文件原名在路径中，其他上传信息：md5、图片处理字符串、标签字符串、文件密钥都与文件一起使用表单上传\n       小bug，如果参数中出现了@Response装饰器，那么直接使用return返回不成功，需要使用res.end\n    */\n    @Post(\"/upload\")\n    @UseGuards(UploadParamGuard)\n    async upload(@Body() body): Promise<CommonData & { url: string }> {\n        const { uploadForm: obj, uploadFile: file } = body;\n        let url: string;\n        // 这里使用trycatch块主要是为了不论抛出神码异常，上传的临时文件都会被删除，最后异常仍旧会被过滤器处理\n        try {\n            // 这里需要将图片、音频、视频配置关联查找出来，后面保存文件预处理要使用\n            const bucket: any = await this.bucketRepository.createQueryBuilder(\"bucket\")\n                .leftJoinAndSelect(\"bucket.imageConfig\", \"imageConfig\")\n                .leftJoinAndSelect(\"bucket.audioConfig\", \"audioConfig\")\n                .leftJoinAndSelect(\"bucket.videoConfig\", \"videoConfig\")\n                .where(\"bucket.name = :name\", { name: obj.bucketName })\n                .getOne();\n            if (!bucket) {\n                throw new HttpException(\"指定空间\" + obj.bucketName + \"不存在\", 401);\n            }\n            // 上传文件的文件名必须与路径中文件名相同，路径中文件名是上传预处理时就确定好的\n            if (file.name !== obj.rawName) {\n                throw new HttpException(\"上传文件名\" + file.name + \"与请求头中文件名\" + obj.fileName + \"不符\", 411);\n            }\n            const { imagePreProcessString, contentSecret, tagsString, md5 } = obj;\n            // 对上传文件进行md5校验\n            const buffer: Buffer = await this.fileUtil.read(file.path);\n            if (!(crypto.createHash(\"md5\").update(buffer).digest(\"hex\") === md5)) {\n                throw new HttpException(\"文件md5校验失败\", 411);\n            }\n            // 保存上传文件，对文件进行处理后保存在store目录下，将文件信息保存到数据库中\n            url = await this.fileService.saveUploadFile(bucket, file, obj);\n        } catch (err) {\n            throw err;\n        } finally {\n            await this.fileUtil.delete(file.path);\n        }\n        return {\n            code: 200,\n            message: \"上传文件成功\",\n            url\n        };\n    }\n\n    /* 访问文件接口，文件路径在url中\n       私有空间文件需要token，token与图片处理字符串都在查询字符串中\n       文件存在且token正确，处理后返回，不存在返回错误\n       这个接口不需要Guard，因为如果缺少参数就找不到路由\n    */\n    @Get(\"/visit/:bucketName/:fileName\")\n    async visit(@Param() param: PathParam, @Query() query: QueryParam, @Response() res, @Request() req): Promise<any> {\n        const { bucketName, fileName } = param;\n        const { imagePostProcessString, token } = query;\n        // 判断文件是否存在\n        const realPath: string = this.baseDirectory + \"/\" + bucketName + \"/\" + fileName;\n        if (!this.fileUtil.exist(realPath)) {\n            throw new HttpException(\"指定文件不存在\", 404);\n        }\n        // 判断空间是否存在，由于要判断公有、私有空间，这里需要查询出空间\n        const bucket: any = await this.bucketRepository.createQueryBuilder(\"bucket\")\n            .leftJoinAndSelect(\"bucket.imageConfig\", \"imageConfig\")\n            .leftJoinAndSelect(\"bucket.audioConfig\", \"audioConfig\")\n            .leftJoinAndSelect(\"bucket.videoConfig\", \"videoConfig\")\n            .where(\"bucket.name = :name\", { name: bucketName })\n            .getOne();\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        // 私有空间需要验证token\n        if (bucket.publicOrPrivate === \"private\") {\n            // token不存在\n            if (!token) {\n                throw new HttpException(\"访问私有空间文件需要token\", 412);\n            }\n            // 请求的全路径，包含协议、域名、端口、查询字符串，需要URL解码\n            let fullUrl: string = decodeURI(req.protocol + \"://\" + req.get(\"host\") + req.originalUrl);\n            // 获取计算token时使用的url\n            if (imagePostProcessString) {\n                // 存储图片处理字符串时需要包含它\n                fullUrl = fullUrl.substring(0, fullUrl.lastIndexOf(\"&token=\"));\n            } else {\n                // 不存在图片处理字符串时，包含？之前的路径\n                fullUrl = fullUrl.substring(0, fullUrl.lastIndexOf(\"?token=\"));\n            }\n            // 根据空间配置、url验证token\n            this.tokenUtil.verify(fullUrl, bucket, token);\n        }\n        // 解析图片处理字符串为对象\n        let imagePostProcessInfo: ImagePostProcessInfo = {} as any;\n        if (imagePostProcessString) {\n            try {\n                imagePostProcessInfo = JSON.parse(imagePostProcessString);\n            } catch (err) {\n                throw new HttpException(\"JSON解析错误:\" + err.toString(), 409);\n            }\n\n        }\n        // 获取文件种类\n        const type: string = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n        const kind: string = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            // 图片需要使用处理工具进行处理之后返回，得到处理之后的buffer\n            const buffer: Buffer = await this.imageProcessUtil.processAndOutput(bucket, realPath, imagePostProcessInfo);\n            // 获取处理后图片元数据，主要为获取其类型，因为经过处理图片类型可能已经改变\n            const metadata: ImageMetadata = await this.imageProcessUtil.getMetadata(buffer);\n            // 设置文件类型头信息\n            res.setHeader(\"Content-Type\", mime.getType(metadata.format));\n            // 不设置内容长度，会出现错误err_content_mismatch\n            // res.setHeader(\"Content-Length\", Buffer.byteLength(buffer))\n            // 私有空间\n            if (bucket.publicOrPrivate === \"private\") {\n                // 文件不缓存，因为有token，暂时这样处理，也可以设置一个缓存时间\n                res.setHeader(\"Cache-Control\", [ \"no-store\", \"no-cache\" ]);\n            }\n            // 文件默认显示在浏览器中，不下载，如果浏览器不支持文件类型，还是会下载\n            res.setHeader(\"Content-Disposition\", \"inline\");\n            res.end(buffer);\n        } else {\n            // 其他类型暂不支持\n        }\n    }\n}\n"]}