{"version":3,"sources":["../src/service/config.service.ts"],"names":[],"mappings":"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","file":"config.service.js","sourcesContent":["import { EnableImageWatermark } from \"../interface/config/enable.image.watermark\";\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { BucketConfig } from \"../interface/config/bucket.config\";\nimport { ImageMetadata } from \"../interface/file/image.metadata\";\nimport { AudioFormat } from \"../interface/config/audio.format\";\nimport { ImageFormat } from \"../interface/config/image.format\";\nimport { VideoFormat } from \"../interface/config/video.format\";\nimport { ImageProcessUtil } from \"../util/image.process.util\";\nimport { AudioConfig } from \"../model/audio.config.entity\";\nimport { ImageConfig } from \"../model/image.config.entity\";\nimport { VideoConfig } from \"../model/video.config.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { FileUtil } from \"../util/file.util\";\nimport { Repository } from \"typeorm\";\nimport * as  path from \"path\";\nimport * as fs from \"fs\";\n\n@Injectable()\nexport class ConfigService {\n\n    private readonly baseDirectory = path.resolve(process.cwd(), \"storages\", \"local\");\n\n    constructor(\n        @Inject(FileUtil) private readonly fileUtil: FileUtil,\n        @Inject(ImageProcessUtil) private readonly imageProcessUtil: ImageProcessUtil,\n        @InjectRepository(Image) private readonly imageRepository: Repository<Image>,\n        @InjectRepository(Bucket) private readonly bucketRepository: Repository<Bucket>,\n        @InjectRepository(ImageConfig) private readonly imageConfigRepository: Repository<ImageConfig>,\n        @InjectRepository(AudioConfig) private readonly audioConfigRepository: Repository<AudioConfig>,\n        @InjectRepository(VideoConfig) private readonly videoConfigRepository: Repository<VideoConfig>\n    ) {\n    }\n\n    async saveBucketConfig(body: BucketConfig): Promise<void> {\n        let exist: Bucket | undefined;\n        /* 空间目录 */\n        const directoryPath: string = this.baseDirectory + \"/\" + body.name;\n        if (body.isPublic) {\n            exist = await this.bucketRepository.findOne(1);\n        } else {\n            exist = await this.bucketRepository.findOne(2);\n        }\n        if (exist) {\n            if (body.isPublic) {\n                exist.name = body.name;\n            } else {\n                exist.name = body.name;\n                exist.tokenExpire = Number.parseInt(body.tokenExpire as any);\n                exist.tokenSecretKey = body.tokenSecretKey;\n            }\n            try {\n                await this.bucketRepository.save(exist);\n                // 创建新目录，暂定不删除旧目录,只是新建这次配置的目录\n                if (!this.fileUtil.exist(directoryPath)) {\n                    await this.fileUtil.mkdir(directoryPath);\n                }\n            } catch (err) {\n                throw new HttpException(\"空间配置更新失败\" + err.toString(), 410);\n            }\n            return;\n        }\n        const bucket: Bucket = new Bucket();\n        const audioConfig: AudioConfig = new AudioConfig();\n        const videoConfig: VideoConfig = new VideoConfig();\n        const imageConfig: ImageConfig = new ImageConfig();\n        if (body.isPublic) {\n            bucket.id = 1;\n            bucket.publicOrPrivate = \"public\";\n        } else {\n            bucket.id = 2;\n            bucket.publicOrPrivate = \"private\";\n            bucket.tokenExpire = +body.tokenExpire as any;\n            bucket.tokenSecretKey = body.tokenSecretKey as any;\n        }\n        bucket.name = body.name;\n        audioConfig.id = bucket.id;\n        videoConfig.id = bucket.id;\n        imageConfig.id = bucket.id;\n        bucket.audioConfig = audioConfig;\n        bucket.videoConfig = videoConfig;\n        bucket.imageConfig = imageConfig;\n        try {\n            await this.bucketRepository.save(bucket);\n            if (!this.fileUtil.exist(directoryPath)) {\n                await this.fileUtil.mkdir(directoryPath);\n            }\n        } catch (err) {\n            throw new HttpException(\"空间保存失败\" + err.toString(), 410);\n        }\n    }\n\n    async saveImageFormat(body: ImageFormat): Promise<void> {\n        let { format } = body;\n        format = format.toLowerCase();\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"imageConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                buckets[i].imageConfig.format = format;\n                await this.imageConfigRepository.save(buckets[i].imageConfig);\n            }\n        } catch (err) {\n            throw new HttpException(\"图片保存格式更新失败\" + err.toString(), 410);\n        }\n    }\n\n    async saveEnableImageWatermark(body: EnableImageWatermark): Promise<void> {\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"imageConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        let watermarkEnable: number;\n        if (body.enable) {\n            watermarkEnable = 1;\n        } else {\n            watermarkEnable = 0;\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                buckets[i].imageConfig.watermarkEnable = watermarkEnable;\n                await this.imageConfigRepository.save(buckets[i].imageConfig);\n            }\n        } catch (err) {\n            throw new HttpException(\"水印启用更新失败\" + err.toString(), 410);\n        }\n    }\n\n    async saveImageWatermark(file: any, obj: any): Promise<void> {\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"imageConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        for (let i = 0; i < buckets.length; i++) {\n            let metadata: ImageMetadata = {} as any;\n            // 根据format设置处理后文件类型\n            const format = buckets[i].imageConfig.format || \"raw\";\n            // 根据不同的图片保存类型，处理并且存储图片，返回处理后元数据\n            if (format === \"raw\") {\n                metadata = await this.imageProcessUtil.processAndStore(file.path, buckets[i], {\n                    strip: true,\n                    watermark: false\n                } as any);\n            } else if (format === \"webp_damage\") {\n                metadata = await this.imageProcessUtil.processAndStore(file.path, buckets[i], {\n                    format: \"webp\",\n                    strip: true,\n                    watermark: false\n                } as any);\n            } else if (format === \"webp_undamage\") {\n                metadata = await this.imageProcessUtil.processAndStore(file.path, buckets[i], {\n                    format: \"webp\",\n                    lossless: true,\n                    strip: true,\n                    watermark: false\n                } as any);\n            }\n            const image: Image = new Image();\n            image.bucket = buckets[i];\n            image.rawName = file.name;\n            image.name = metadata.name;\n            image.type = metadata.format;\n            image.width = metadata.width;\n            image.height = metadata.height;\n            image.size = metadata.size;\n            const isExist: Image | undefined = await this.imageRepository.findOne({ name: metadata.name, bucketId: buckets[i].id });\n            // 只有指定路径图片不存在时才会保存\n            if (!isExist) {\n                try {\n                    await this.imageRepository.save(image);\n                } catch (err) {\n                    // 保存图片出现错误，要删除存储图片\n                    await this.fileUtil.delete(this.baseDirectory + \"/\" + buckets[i].name + \"/\" + image.name + \".\" + image.type);\n                    throw new HttpException(\"水印图片保存失败\" + err.toString(), 410);\n                }\n            }\n            // 更新图片配置，这里的水印图片路径为图片的绝对路径\n            // 不管图片是否已经存在，图片配置都需要更新\n            try {\n                buckets[i].imageConfig.watermarkSaveKey = \"/storages/local/\" + buckets[i].name + \"/\" + image.name + \".\" + image.type;\n                buckets[i].imageConfig.watermarkGravity = obj.gravity;\n                buckets[i].imageConfig.watermarkOpacity = obj.opacity;\n                buckets[i].imageConfig.watermarkWs = obj.ws;\n                buckets[i].imageConfig.watermarkX = obj.x;\n                buckets[i].imageConfig.watermarkY = obj.y;\n                await this.imageConfigRepository.save(buckets[i].imageConfig);\n            } catch (err) {\n                throw new HttpException(\"图片水印更新失败\" + err.toString(), 410);\n            }\n        }\n        // 删除临时文件\n        await this.fileUtil.delete(file.path);\n    }\n\n    async saveAudioFormat(body: AudioFormat): Promise<any> {\n        let { format } = body;\n        format = format.toLowerCase();\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"audioConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                buckets[i].audioConfig.format = format;\n                await this.audioConfigRepository.save(buckets[i].audioConfig);\n            }\n        } catch (err) {\n            throw new HttpException(\"音频保存格式更新失败\" + err.toString(), 410);\n        }\n    }\n\n    async saveVideoFormat(body: VideoFormat): Promise<any> {\n        let { format, resolution } = body;\n        format = format.toLowerCase();\n        resolution = resolution.toLowerCase();\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"videoConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                buckets[i].videoConfig.format = format;\n                buckets[i].videoConfig.resolution = resolution;\n                await this.videoConfigRepository.save(buckets[i].videoConfig);\n            }\n        } catch (err) {\n            throw new HttpException(\"视频保存格式更新失败\" + err.toString(), 410);\n        }\n    }\n}\n"]}