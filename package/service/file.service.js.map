{"version":3,"sources":["../src/service/file.service.ts"],"names":[],"mappings":"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","file":"file.service.js","sourcesContent":["import { Component, HttpException, Inject } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { ImageMetadata } from \"../interface/file/image.metadata\";\nimport { ImagePostProcessInfo, ImagePreProcessInfo } from \"../interface/file/image.process.info\";\nimport { UploadFile } from \"../interface/file/upload.file\";\nimport { UploadForm } from \"../interface/file/upload.form\";\nimport { Audio } from \"../model/audio.entity\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { File } from \"../model/file.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { Video } from \"../model/video.entity\";\nimport { ImageProcessUtil } from \"../util/image.process.util\";\nimport { KindUtil } from \"../util/kind.util\";\nimport { TokenUtil } from \"../util/token.util\";\n\n/* 文件Service*/\n@Component()\nexport class FileService {\n\n    constructor(\n        @Inject(KindUtil) private readonly kindUtil: KindUtil,\n        @Inject(TokenUtil) private readonly tokenUtil: TokenUtil,\n        @Inject(ImageProcessUtil) private readonly imageProcessUtil: ImageProcessUtil,\n        @InjectRepository(File) private readonly fileRepository: Repository<File>,\n        @InjectRepository(Image) private readonly imageRepository: Repository<Image>,\n        @InjectRepository(Audio) private readonly audioRepository: Repository<Audio>,\n        @InjectRepository(Video) private readonly videoRepository: Repository<Video>,\n        @InjectRepository(Bucket) private readonly bucketRepository: Repository<Bucket>) {\n    }\n\n    async saveUploadFile(bucket: Bucket, file: UploadFile, obj: UploadForm): Promise<any> {\n        const { imagePreProcessString, contentSecret, tagsString, md5, bucketName, rawName } = obj;\n        let imageProcessInfo: ImagePreProcessInfo = {} as any, tags: Array<string> = {} as any;\n        try {\n            if (tagsString) {\n                tags = JSON.parse(tagsString);\n            }\n            if (imagePreProcessString) {\n                imageProcessInfo = JSON.parse(imagePreProcessString);\n                if (bucket.imageConfig.format === \"webp_damage\") {\n                    (imageProcessInfo as ImagePostProcessInfo).format = \"webp\";\n                    (imageProcessInfo as ImagePostProcessInfo).lossless = false;\n                } else if (bucket.imageConfig.format === \"webp_undamage\") {\n                    // 这样写。后面需要分号\n                    (imageProcessInfo as ImagePostProcessInfo).format = \"webp\";\n                    (imageProcessInfo as ImagePostProcessInfo).lossless = true;\n                } else {\n                    // 这样写。后面需要分号\n                    (imageProcessInfo as ImagePostProcessInfo).format = undefined as any;\n                    (imageProcessInfo as ImagePostProcessInfo).lossless = undefined as any;\n                }\n            }\n        } catch (err) {\n            throw new HttpException(\"JSON解析错误:\" + err.toString(), 405);\n        }\n        // 默认情况下，上传文件都会进行处理保存，如果处理后得到的文件名(sha256)已存在，会覆盖源文件\n        const metadata: ImageMetadata = await this.imageProcessUtil.processAndStore(file.path, bucket, imageProcessInfo as any);\n        const type: string = rawName.substring(rawName.lastIndexOf(\".\") + 1);\n        const kind: string = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            const exist: Image|undefined = await this.imageRepository.findOne({ name: metadata.name, bucketId: bucket.id });\n            // 如果处理后得到文件已存在，不保存，正确返回\n            if (exist) {\n                return \"/local/file/visit/\" + bucket.name + \"/\" + exist.name + \".\" + exist.type;\n            }\n            // 不存在，保存处理后文件\n            const image: Image = new Image();\n            image.bucket = bucket;\n            image.rawName = file.name;\n            image.name = metadata.name;\n            image.size = metadata.size;\n            image.type = metadata.format;\n            image.width = metadata.width;\n            image.height = metadata.height;\n            if (tags) {\n                image.tags = tags;\n            }\n            if (contentSecret) {\n                image.contentSecret = contentSecret;\n            }\n            try {\n                await this.imageRepository.save(image);\n            } catch (err) {\n                throw new HttpException(\"文件保存到数据库失败:\" + err.toString(), 406);\n            }\n            return \"/local/file/visit/\" + bucket.name + \"/\" + image.name + \".\" + image.type;\n        } else {\n            // 暂时不支持其他种类文件\n        }\n    }\n\n    async getAll(data: any, bucket: Bucket) {\n        data.files = await bucket.files;\n        data.images = await bucket.images;\n        data.audios = await bucket.audios;\n        data.videos = await bucket.videos;\n        data.documents = await bucket.documents;\n        const tokenUtil = this.tokenUtil;\n        const addUrl = async (value) => {\n            value.url = \"/\" + bucket.name + \"/\" + value.name + \".\" + value.type;\n            if (bucket.publicOrPrivate === \"private\") {\n                value.url += \"?token=\" + await tokenUtil.getToken(data.baseUrl + value.url, bucket);\n            }\n        };\n        await data.files.forEach(addUrl);\n        await data.images.forEach(addUrl);\n        await data.audios.forEach(addUrl);\n        await data.videos.forEach(addUrl);\n        await data.documents.forEach(addUrl);\n        return;\n    }\n}\n"]}