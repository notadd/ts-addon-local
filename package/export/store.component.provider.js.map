{"version":3,"sources":["../src/export/store.component.provider.ts"],"names":[],"mappings":"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","file":"store.component.provider.js","sourcesContent":["import { ImagePostProcessInfo, ImagePreProcessInfo } from \"../interface/file/image.process.info\";\nimport { HttpException, Injectable, Inject } from \"@nestjs/common\";\nimport { ImageMetadata } from \"../interface/file/image.metadata\";\nimport { ImageProcessUtil } from \"../util/image.process.util\";\nimport { getRepositoryToken } from \"@nestjs/typeorm\";\nimport { Repository, Connection } from \"typeorm\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { TokenUtil } from \"../util/token.util\";\nimport { FileUtil } from \"../util/file.util\";\nimport { KindUtil } from \"../util/kind.util\";\nimport * as path from \"path\";\n\nexport class StoreComponent {\n\n    private readonly baseDirectory = path.resolve(process.cwd(), \"storages\", \"local\");\n\n    constructor(\n        private readonly kindUtil: KindUtil,\n        private readonly fileUtil: FileUtil,\n        private readonly tokenUtil: TokenUtil,\n        private readonly imageProcessUtil: ImageProcessUtil,\n        private readonly imageRepository: Repository<Image>,\n        private readonly bucketRepository: Repository<Bucket>\n    ) {}\n\n    async delete(bucketName: string, name: string, type: string): Promise<void> {\n        // 验证参数\n        if (!bucketName || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket | undefined = await this.bucketRepository.findOne({ name: bucketName });\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        // 根据文件种类，查找、删除数据库\n        const kind = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            const image: Image | undefined = await this.imageRepository.findOne({ name, bucketId: bucket.id });\n            if (!image) {\n                throw new HttpException(\"文件\" + name + \"不存在于数据库中\", 404);\n            }\n            await this.imageRepository.delete({ name, bucketId: bucket.id });\n        } else {\n            // 其他类型暂不支持\n        }\n        // 删除目录下存储文件\n        const realPath = this.baseDirectory + \"/\" + bucketName + \"/\" + name + \".\" + type;\n        if (!this.fileUtil.exist(realPath)) {\n            throw new HttpException(\"要删除的文件不存在\", 404);\n        }\n        await this.fileUtil.delete(realPath);\n    }\n\n    async upload(bucketName: string, rawName: string, base64: string, imagePreProcessInfo: ImagePreProcessInfo): Promise<{ bucketName: string, name: string, type: string }> {\n        const tempPath: string = this.baseDirectory + \"/temp\" + ((+new Date()) + \"\") + rawName;\n        if (!bucketName || !rawName || !base64) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        imagePreProcessInfo = !imagePreProcessInfo ? {} as any : imagePreProcessInfo;\n        const bucket: any = await this.bucketRepository.createQueryBuilder(\"bucket\")\n            .leftJoinAndSelect(\"bucket.imageConfig\", \"imageConfig\")\n            .where(\"bucket.name = :name\", { name: bucketName })\n            .getOne();\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        await this.fileUtil.write(tempPath, Buffer.from(base64, \"base64\"));\n        let metadata: ImageMetadata = {} as any;\n        const type: string = rawName.substring(rawName.lastIndexOf(\".\") + 1);\n        // 根据文件种类\n        const kind: string = this.kindUtil.getKind(type);\n        try {\n            if (kind === \"image\") {\n                const imagePostProcessInfo: ImagePostProcessInfo = imagePreProcessInfo as any;\n                const format = bucket.imageConfig.format || \"raw\";\n                // 根据不同的图片保存类型，处理并且存储图片，返回处理后元数据\n                if (format === \"raw\") {\n                    imagePostProcessInfo.strip = true;\n                    imagePostProcessInfo.watermark = false;\n                } else if (format === \"webp_damage\") {\n                    imagePostProcessInfo.format = \"webp\";\n                    imagePostProcessInfo.strip = true;\n                    imagePostProcessInfo.watermark = false;\n                } else if (format === \"webp_undamage\") {\n                    imagePostProcessInfo.format = \"webp\";\n                    imagePostProcessInfo.lossless = true;\n                    imagePostProcessInfo.strip = true;\n                    imagePostProcessInfo.watermark = false;\n                }\n                metadata = await this.imageProcessUtil.processAndStore(tempPath, bucket, imagePostProcessInfo);\n                const image: Image = new Image();\n                image.bucket = bucket;\n                image.rawName = rawName;\n                image.name = metadata.name;\n                image.type = metadata.format;\n                image.width = metadata.width;\n                image.height = metadata.height;\n                image.size = metadata.size;\n                const isExist: Image | undefined = await this.imageRepository.findOne({ name: metadata.name, bucketId: bucket.id });\n                // 只有指定路径图片不存在时才会保存\n                if (!isExist) {\n                    try {\n                        await this.imageRepository.save(image);\n                    } catch (err) {\n                        // 保存图片出现错误，要删除存储图片\n                        await this.fileUtil.delete(this.baseDirectory + \"/\" + bucket.name + \"/\" + image.name + \".\" + image.type);\n                        throw new HttpException(\"上传图片保存失败\" + err.toString(), 410);\n                    }\n                }\n            } else {\n                // 其他类型暂不支持\n            }\n        } catch (err) {\n            throw err;\n        } finally {\n            // 如果中间过程抛出了异常，要保证删除临时图片\n            await this.fileUtil.deleteIfExist(tempPath);\n        }\n        return { bucketName, name: metadata.name, type: metadata.format };\n    }\n\n    async getUrl(req: any, bucketName: string, name: string, type: string, imagePostProcessInfo: ImagePostProcessInfo): Promise<string> {\n        // 验证参数\n        if (!bucketName || !name || !type || !req || !req.protocol || !req.get(\"host\")) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket | undefined = await this.bucketRepository.findOne({ name: bucketName });\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        let url: string = req.protocol + \"://\" + req.get(\"host\") + \"/local/file/visit\";\n        // 根据文件种类，查找、删除数据库\n        const kind = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            const image: Image | undefined = await this.imageRepository.findOne({ name, bucketId: bucket.id });\n            if (!image) {\n                throw new HttpException(\"指定图片\" + name + \".\" + type + \"不存在\", 404);\n            }\n            // 所有文件调用统一的拼接Url方法\n            url += \"/\" + bucketName + \"/\" + name + \".\" + type;\n            // 存储图片处理信息时\n            if (imagePostProcessInfo) {\n                // 拼接图片处理的查询字符串\n                url += \"?imagePostProcessString=\" + JSON.stringify(imagePostProcessInfo);\n                // 私有空间要拼接token，token使用它之前的完整路径计算\n                if (bucket.publicOrPrivate === \"private\") {\n                    url += \"&token=\" + this.tokenUtil.getToken(url, bucket);\n                }\n            } else {\n                if (bucket.publicOrPrivate === \"private\") {\n                    url += \"?token=\" + this.tokenUtil.getToken(url, bucket);\n                }\n            }\n        } else {\n            // 其他类型暂不支持\n        }\n        return url;\n    }\n}\n\nexport const StoreComponentToken = \"StoreComponentToken\";\n\nexport const StoreComponentProvider = {\n    provide: StoreComponentToken,\n    useFactory: (kindUtil: KindUtil, fileUtil: FileUtil, tokenUtil: TokenUtil, imageProcessUtil: ImageProcessUtil, imageRepository: Repository<Image>, bucketRepository: Repository<Bucket>) => {\n        return new StoreComponent(kindUtil, fileUtil, tokenUtil, imageProcessUtil, imageRepository, bucketRepository);\n    },\n    inject: [KindUtil, FileUtil, TokenUtil, ImageProcessUtil, getRepositoryToken(Image), getRepositoryToken(Bucket)]\n\n};\n"]}