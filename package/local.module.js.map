{"version":3,"sources":["../src/local.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,gFAA2E;AAC3E,2CAAsE;AACtE,gEAA4D;AAC5D,4DAAwD;AACxD,kEAA8D;AAC9D,kEAA6D;AAC7D,qEAA0D;AAC1D,qEAA0D;AAC1D,qEAA0D;AAC1D,6DAAyD;AACzD,yDAAqD;AACrD,6DAAmD;AACnD,6CAAgD;AAChD,yDAA+C;AAC/C,kDAA8C;AAC9C,uDAA6C;AAC7C,uDAA6C;AAC7C,uDAA6C;AAC7C,gDAA4C;AAC5C,gDAA4C;AAC5C,qDAA2C;AAC3C,6BAA6B;AAmC7B,IAAa,WAAW,GAAxB;IAEI,YAA+C,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAAI,CAAC;IAEhE,YAAY;;YACd,MAAM,QAAQ,GAAW,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;YACjE,MAAM,KAAK,GAAW,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YACvE,MAAM,IAAI,GAAW,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YAC9E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;gBAChC,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aACvC;YACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAC7B,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACpC;YACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBAC5B,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACnC;QACL,CAAC;KAAA;CACJ,CAAA;AAlBY,WAAW;IAjCvB,eAAM,EAAE;IACR,eAAM,CAAC;QACJ,OAAO,EAAE;YACL,uBAAa,CAAC,UAAU,CAAC;gBACrB,sBAAM;gBACN,iCAAW;gBACX,iCAAW;gBACX,iCAAW;gBACX,kBAAI;gBACJ,0BAAQ;gBACR,oBAAK;gBACL,oBAAK;gBACL,oBAAK;aACR,CAAC;SACL;QACD,WAAW,EAAE;YACT,gCAAc;SACjB;QACD,UAAU,EAAE;YACR,gCAAc;YACd,8BAAa;YACb,4BAAY;YACZ,0BAAW;YACX,oBAAQ;YACR,oBAAQ;YACR,sBAAS;YACT,qCAAgB;YAChB,iDAAsB;SACzB;QACD,OAAO,EAAE;YACL,iDAAsB;SACzB;KACJ,CAAC;IAGe,WAAA,eAAM,CAAC,oBAAQ,CAAC,CAAA;qCAA4B,oBAAQ;GAFxD,WAAW,CAkBvB;AAlBY,kCAAW","file":"local.module.js","sourcesContent":["import { StoreComponentProvider } from \"./export/store.component.provider\";\nimport { Global, Module, OnModuleInit, Inject } from \"@nestjs/common\";\nimport { ConfigResolver } from \"./resolver/config.resolver\";\nimport { FileResolver } from \"./resolver/file.resolver\";\nimport { FileController } from \"./controller/file.controller\";\nimport { ImageProcessUtil } from \"./util/image.process.util\";\nimport { AudioConfig } from \"./model/audio.config.entity\";\nimport { ImageConfig } from \"./model/image.config.entity\";\nimport { VideoConfig } from \"./model/video.config.entity\";\nimport { ConfigService } from \"./service/config.service\";\nimport { FileService } from \"./service/file.service\";\nimport { Document } from \"./model/document.entity\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Bucket } from \"./model/bucket.entity\";\nimport { TokenUtil } from \"./util/token.util\";\nimport { Audio } from \"./model/audio.entity\";\nimport { Image } from \"./model/image.entity\";\nimport { Video } from \"./model/video.entity\";\nimport { FileUtil } from \"./util/file.util\";\nimport { KindUtil } from \"./util/kind.util\";\nimport { File } from \"./model/file.entity\";\nimport * as path from \"path\";\n\n@Global()\n@Module({\n    modules: [\n        TypeOrmModule.forFeature([\n            Bucket,\n            ImageConfig,\n            AudioConfig,\n            VideoConfig,\n            File,\n            Document,\n            Audio,\n            Video,\n            Image,\n        ]),\n    ],\n    controllers: [\n        FileController,\n    ],\n    components: [\n        ConfigResolver,\n        ConfigService,\n        FileResolver,\n        FileService,\n        KindUtil,\n        FileUtil,\n        TokenUtil,\n        ImageProcessUtil,\n        StoreComponentProvider,\n    ],\n    exports: [\n        StoreComponentProvider,\n    ],\n})\nexport class LocalModule implements OnModuleInit {\n\n    constructor(@Inject(FileUtil) private readonly fileUtil: FileUtil) { }\n\n    async onModuleInit() {\n        const storages: string = path.resolve(process.cwd(), \"storages\");\n        const local: string = path.resolve(process.cwd(), \"storages\", \"local\");\n        const temp: string = path.resolve(process.cwd(), \"storages\", \"local\", \"temp\");\n        if (!this.fileUtil.exist(storages)) {\n            await this.fileUtil.mkdir(storages);\n        }\n        if (!this.fileUtil.exist(local)) {\n            await this.fileUtil.mkdir(local);\n        }\n        if (!this.fileUtil.exist(temp)) {\n            await this.fileUtil.mkdir(temp);\n        }\n    }\n}\n"]}