{"version":3,"sources":["../src/graphql/resolver/file.resolver.ts"],"names":[],"mappings":"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","file":"file.resolver.js","sourcesContent":["import { DownloadProcessData } from \"../../interface/file/download.process.data\";\nimport { ExceptionInterceptor } from \"../../interceptor/exception.interceptor\";\nimport { Query, Resolver, ResolveProperty, Mutation } from \"@nestjs/graphql\";\nimport { UploadProcessBody } from \"../../interface/file/upload.process.body\";\nimport { UploadProcessData } from \"../../interface/file/upload.process.data\";\nimport { FileLocationBody } from \"../../interface/file/file.location.body\";\nimport { HttpException, Inject, UseInterceptors } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { FileService } from \"../../service/file.service\";\nimport { AllBody } from \"../../interface/file/all.body\";\nimport { AllData } from \"../../interface/file/all.data\";\nimport { OneBody } from \"../../interface/file/one.body\";\nimport { OneData } from \"../../interface/file/one.data\";\nimport { Document } from \"../../model/document.entity\";\nimport { CommonData } from \"../../interface/common\";\nimport { Bucket } from \"../../model/bucket.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { TokenUtil } from \"../../util/token.util\";\nimport { Audio } from \"../../model/audio.entity\";\nimport { Video } from \"../../model/video.entity\";\nimport { Image } from \"../../model/image.entity\";\nimport { File } from \"../../model/file.entity\";\nimport { KindUtil } from \"../../util/kind.util\";\nimport { FileUtil } from \"../../util/file.util\";\nimport { IncomingMessage } from \"http\";\nimport * as path from \"path\";\n\n/*文件Resolver，包含了文件下载预处理、上传预处理\n  获取单个文件url、获取多个文件信息以及url、删除文件等接口\n*/\n@Resolver(\"File\")\n@UseInterceptors(ExceptionInterceptor)\nexport class FileResolver {\n\n    constructor(\n        @Inject(FileUtil) private readonly fileUtil: FileUtil,\n        @Inject(KindUtil) private readonly kindUtil: KindUtil,\n        @Inject(TokenUtil) private readonly tokenUtil: TokenUtil,\n        @Inject(FileService) private readonly fileService: FileService,\n        @InjectRepository(File) private readonly fileRepository: Repository<File>,\n        @InjectRepository(Image) private readonly imageRepository: Repository<Image>,\n        @InjectRepository(Bucket) private readonly bucketRepository: Repository<Bucket>) {\n    }\n\n    /* 文件下载预处理接口\n     当客户端需要下载某个文件时使用\n     返回下载文件的方法、url、头信息\n     @Param bucketName：文件所属空间名\n     @Param type：       上传文件扩展名，即文件类型\n     @Param name：       文件名\n     @Return data.code：状态码，200为成功，其他为错误\n             data.message：响应信息\n             data.url：下载时的url\n             data.method： 下载方法\n             data.headers:下载文件头信息，这里其实不需要，但是为了与又拍云统一，返回null\n  */\n    @Query(\"downloadProcess\")\n    async downloadProcess(req: any, body: FileLocationBody): Promise<DownloadProcessData> {\n        const data: DownloadProcessData = {\n            code: 200,\n            message: \"下载预处理成功\",\n            method: \"get\",\n            headers: {\n                bucketName: \"\",\n                fileName: \"\"\n            },\n            url: req.protocol + \"://\" + req.get(\"host\") + \"/local/file/download\"\n        };\n        // 验证参数存在\n        const { bucketName, name, type } = body;\n        if (!bucketName || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: any = await this.bucketRepository.findOne({ name: bucketName });\n        // 指定空间不存在\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        // 根据文件种类获取文件实例\n        let file: any = {} as any;\n        if (this.kindUtil.isImage(type)) {\n            file = await this.imageRepository.findOne({ name, type, bucketId: bucket.id });\n        } else {\n            // 其他类型暂不支持\n        }\n        if (!file) {\n            throw new HttpException(\"指定文件\" + name + \"不存在\", 404);\n        }\n        data.headers.bucketName = bucket.name;\n        data.headers.fileName = file.name + \".\" + file.type;\n        return data;\n    }\n\n    /*文件表单上传预处理接口\n    @Param tags:文件标签数组\n    @Param contentName：文件名\n    @Param bucketName：上传空间名\n    @Param md5：文件md5,在本地存储中可以用于校验文件\n    @Param contentSecret：文件密钥，暂时不支持这个功能\n    @Param imagePreProcessInfo：图片预处理信息\n    @Return data.code：状态码，200为成功，其他为错误\n            data.message：响应信息\n            data.url：上传时的url\n            data.method： 上传方法\n            data.form：   表单上传的字段对象，包含了imagePreProcessInfo、md5、contentSecret、tags字段，上传时需要加上file字段\n    */\n    @Mutation(\"uploadProcess\")\n    async uploadProcess(req: any, body: UploadProcessBody): Promise<UploadProcessData> {\n        const data: UploadProcessData = {\n            code: 200,\n            message: \"\",\n            method: \"post\",\n            url: req.protocol + \"://\" + req.get(\"host\") + \"/local/file/upload\",\n            baseUrl: req.protocol + \"://\" + req.get(\"host\"),\n            form: {\n                md5: \"\",\n                rawName: \"\",\n                bucketName: \"\",\n                tagsString: undefined,\n                contentSecret: undefined,\n                imagePreProcessString: undefined,\n            }\n        };\n        // 可以根据md5对文件内容进行校验\n        const { bucketName, md5, contentName, contentSecret, tags, imagePreProcessInfo } = body;\n        if (!bucketName || !contentName) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket|undefined = await this.bucketRepository.findOne({ name: bucketName });\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        data.form.md5 = md5;\n        data.form.rawName = contentName;\n        data.form.bucketName = bucket.name;\n        data.form.contentSecret = contentSecret;\n        try {\n            data.form.tagsString = JSON.stringify(tags);\n            data.form.imagePreProcessString = JSON.stringify(imagePreProcessInfo);\n        } catch (err) {\n            throw new HttpException(\"JSON解析错误\" + err.toString(), 409);\n        }\n        return data;\n    }\n\n    /* 获取访问单个文件url方法 ，从后台获取\n       @Param bucketName：空间名\n       @Param name：       文件名，不包括扩展名\n       @Param type:        文件类型\n       @Param imagePostProcessInfo 图片后处理信息，转化为JSON字符串\n       @Return data.code：状态码，200为成功，其他为错误\n               data.message：响应信息\n               data.url：访问文件的全部url，包括域名、目录、文件名、扩展名、token、处理字符串,访问图片方法必须是get，不说明\n    */\n    @Query(\"one\")\n    async getOne(req: any, body: OneBody): Promise<OneData> {\n        const data: OneData = {\n            code: 200,\n            message: \"获取文件url成功\",\n            url: req.protocol + \"://\" + req.get(\"host\") + \"/local/file/visit\"\n        };\n        // 验证参数存在，图片后处理信息可选\n        const { bucketName, name, type, imagePostProcessInfo } = body;\n        if (!bucketName || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket|undefined = await this.bucketRepository.createQueryBuilder(\"bucket\")\n            .leftJoinAndSelect(\"bucket.imageConfig\", \"imageConfig\")\n            .leftJoinAndSelect(\"bucket.audioConfig\", \"audioConfig\")\n            .leftJoinAndSelect(\"bucket.videoConfig\", \"videoConfig\")\n            .where(\"bucket.name = :name\", { name: bucketName })\n            .getOne();\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        // 根据文件种类处理\n        const kind = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            const image: Image|undefined = await this.imageRepository.findOne({ name, bucketId: bucket.id });\n            if (!image) {\n                throw new HttpException(\"指定图片\" + name + \".\" + type + \"不存在\", 404);\n            }\n            // 所有文件调用统一的拼接Url方法\n            data.url += \"/\" + bucketName + \"/\" + name + \".\" + type;\n            // 存储图片处理信息时\n            if (imagePostProcessInfo) {\n                // 拼接图片处理的查询字符串\n                data.url += \"?imagePostProcessString=\" + JSON.stringify(imagePostProcessInfo);\n                // 私有空间要拼接token，token使用它之前的完整路径计算\n                if (bucket.publicOrPrivate === \"private\") {\n                    data.url += \"&token=\" + this.tokenUtil.getToken(data.url, bucket);\n                }\n            } else {\n                if (bucket.publicOrPrivate === \"private\") {\n                    data.url += \"?token=\" + this.tokenUtil.getToken(data.url, bucket);\n                }\n            }\n        } else {\n            // 暂不支持\n        }\n        return data;\n    }\n\n    /* 获取指定空间下文件信息以及相关访问url\n       @Param bucketName：文件所属空间\n       @Return data.code： 状态码，200为成功，其他为错误\n              data.message：响应信息\n              data.baseUrl：访问文件的基本url\n              data.files    分页后的文件信息数组，里面添加了访问文件url信息，url不包含域名，包含了文件密钥、token\n              data.imges：   图片信息数组\n              data.audios:  音频信息数组\n              data.videos:  视频信息数组\n              data.documents: 文档信息数组\n    */\n    @Query(\"all\")\n    async files(req: any, body: AllBody): Promise<AllData> {\n        const data: AllData = {\n            code: 200,\n            message: \"获取空间下所有文件成功\",\n            baseUrl: req.protocol + \"://\" + req.get(\"host\") + \"/local/file/visit\",\n            files: [],\n            images: [],\n            audios: [],\n            videos: [],\n            documents: []\n        };\n        const { bucketName } = body;\n        if (!bucketName) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket|undefined = await this.bucketRepository.findOne({ name: bucketName });\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        await this.fileService.getAll(data, bucket);\n        return data;\n    }\n\n    /* 文件删除接口\n       当客户端需要删除某个文件时使用，\n       @Param bucketName：文件所属空间名\n       @Param type：       文件扩展名，即文件类型\n       @Param name：       文件名\n       @Return data.code：状态码，200为成功，其他为错误\n               data.message：响应信息\n    */\n    @Mutation(\"deleteFile\")\n    async deleteFile(req: IncomingMessage, body: FileLocationBody): Promise<CommonData> {\n        // 验证参数\n        const { bucketName, type, name } = body;\n        if (!bucketName || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket|undefined = await this.bucketRepository.findOne({ name: bucketName });\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        // 根据文件种类，查找、删除数据库\n        const kind = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            const image: Image|undefined = await this.imageRepository.findOne({ name, bucketId: bucket.id });\n            if (!image) {\n                throw new HttpException(\"文件\" + name + \"不存在于数据库中\", 404);\n            }\n            await this.imageRepository.delete({ name, bucketId: bucket.id });\n        } else {\n            // 其他类型暂不支持\n        }\n        // 删除目录下存储文件\n        const realPath = path.resolve(__dirname, \"../../\", \"store\", bucketName, name + \".\" + type);\n        if (!this.fileUtil.exist(realPath)) {\n            throw new HttpException(\"要删除的文件不存在\", 404);\n        }\n        await this.fileUtil.delete(realPath);\n        return { code: 200, message: \"删除成功\" };\n    }\n}\n"]}